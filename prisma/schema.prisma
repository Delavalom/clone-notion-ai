datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  username      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Note[]

  @@map("users")
}

model Note {
  id        String    @id @default(uuid())
  title     String    @default("untitled")
  children  Element[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")

  @@index([userId])
  @@map("notes")
}

model Element {
  id     String    @id @default(uuid())
  type   String @default("paragraph")
  children  Text[]
  note   Note   @relation(fields: [noteId], references: [id])
  noteId String @map("note_id")

  @@index([noteId])
}


model Text {
  id            String      @id @default(uuid())
  text          String   @default("")
  bold          Boolean?
  code          Boolean?
  italic        Boolean?
  underline     Boolean?
  strikethrough Boolean?
  element       Element  @relation(fields: [elementId], references: [id])
  elementId     String      @map("element_id")

  @@index([elementId])
}
